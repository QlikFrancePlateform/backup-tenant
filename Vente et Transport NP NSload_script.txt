///$tab Main
SET ThousandSep=' ';
SET DecimalSep='.';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 €;-# ##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET MonthNames='janv;févr;mars;avr;mai;juin;juil;août;sept;oct;nov;déc';
SET DayNames='lun.;mar.;mer.;jeu.;ven.;sam.;dim.';
SET LongMonthNames='janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre';
SET LongDayNames='lundi;mardi;mercredi;jeudi;vendredi;samedi;dimanche';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='fr-FR';
SET hideprefix = '_';


// section access;
// // LOAD
// //     "ACCESS",
// //     "USERID",
// //     REGION_SECURE,
// //     OMIT
// // FROM [lib://data (qtsel_xle)/Point de Ventes\Securite.xlsx]
// // (ooxml, embedded labels, table is Sheet1);

// load * inline [
// ACCESS, USERID, REGION_SECURE
// ADMIN, qfp\xavier, ALL
// USER, auth0\xle@qlik.com, BRETAGNE
// USER, FRPAR-XLE\mathilde, BRETAGNE
// USER, INTERNAL\SA_SCHEDULER,*
// ];
// section application;

// Section Access;
// LOAD * inline [
// ACCESS, USERID, GROUP, OMIT
// USER ,*,"CN=QLIK_RCT_DDO,OU=Groups,DC=RICARD,dc=pernod-ricard,dc=group",SELL_IN.MONTANT,
// USER ,*,"CN=QLIK_RCT_BI,OU=Groups,DC=RICARD,dc=pernod-ricard,dc=group",
// ADMIN, INTERNAL\SA_SCHEDULER,*,
// ];



Search Exclude REGION_SECURE, region.Area, Quantité,COGS,CA_HT,CA, Marge,Discount,Article, photo, coordonnees,Client, AnneeMois;
Search Exclude Client_id, Chemin, GPS_Concurent, Dataset_TravelArea, Key_Livraison, ArticleEAN, Period_Month, Magasin_Concurent;
Search Exclude product_name, ArticleEAN, Entrepot, Commune, Nationalite;
Search Exclude [Date ForeCast], Period_MonthName, Period_MonthName_Short, Period_DayNameMonth, Period_DayNameMonthYear;


///$tab Traduction
Traduction:
LOAD
    Titre,
    "Titre-en",
    "Titre-fr"
FROM [lib://SharedDataFolder/Ventes/sources-xav/traduction.xlsx]
(ooxml, embedded labels, table is Sheet1);


// Creation des Variables
let l_Label_Code_idx=1;
Do while len(fieldvalue('Titre',l_Label_Code_idx))        
    let l_Label_Code=fieldvalue('Titre',l_Label_Code_idx);
	let [$(l_Label_Code)] = 'Only({1<Titre = {'&chr(39)& l_Label_Code&chr(39)&'}>} [Titre-'&chr(36)&'(vLangue)])';     
    let l_Label_Code_idx=l_Label_Code_idx+1; 
LOOP

///$tab LOAD
[ForeCast]:
LOAD [AnneeMois],
	[Date ForeCast],
    [AnneeMoisNumber]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/forecast.xlsx]
(ooxml, embedded labels, table is Sheet1);

[Client]:
LOAD 
	[Nationalite],
	[First Name],
	[Gender],
	[Client_id]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/Client.QVD]
(qvd);

[Concurrence]:
LOAD [Magasin_Concurent],
	[GPS_Concurent],
	[Région]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/Concurrence.QVD]
(qvd);

[Details_Commune]:
LOAD [COMMUNE_Area],
	[code_Commune],
	[Commune],
	[population]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/Details_Commune.QVD]
(qvd);

[distance_mag]:
LOAD [Site],
	[mag_ville_Distance],
	[distance],
	[code_Commune]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/distance_mag.QVD]
(qvd);

[MAG]:
LOAD [numMagasin],
	[Site],
	[ville],
	[Région],
	[coordonnees],
	[Type],
	[Statut],
	[Ouverture],
	[REGION_SECURE]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/MAG.QVD]
(qvd);

[REGION]:
LOAD [Région],
	[region.Area],
	[numDep]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/REGION.QVD]
(qvd);

[SupplyChain]:
LOAD [Supply.Rayon],
	[Entrepot],
	[DATE_Livraison],
    Year([DATE_Livraison])*10000 + Month([DATE_Livraison])* 100 + Day([DATE_Livraison]) as key_Date,
    //Year(Date#([DATE_Livraison], 'YYYYMMDD'))*10000 + Month(Date#([DATE_Livraison], 'YYYYMMDD'))* 100 + Day(Date#([DATE_Livraison], 'YYYYMMDD')) as key_Date,
    //Date(Date#([DATE_Livraison], 'YYYYMMDD') ) AS [DATE_Livraison],
    
	[Centrale],
	[GPS_Entrepot],
	[Codepos],
	[CP_Usine],
	[Chemin],
	[Usine],
	[CP_Entrepot],
	[Volumetrie],
	[Annee Construction],
	[Key_Livraison]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/SupplyChain.QVD]
(qvd);

[TravelAreas]:
LOAD [Dataset_TravelArea],
	[Dataset_Cost],
	[numMagasin],
	[Transport]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/TravelAreas.QVD]
(qvd);

[Trimestre]:
LOAD [Mois],
	[Trimestre]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/Trimestre.QVD]
(qvd);

[Vente]:
LOAD [ArticleEAN],
	[photo],
	[numMagasin],
	[NMois],
	[Marque],
	[product_name],
	[Categorie],
	[Mois],
	[Discount],
	[Marge],
	[Année],
	[CA_HT],
	[COGS],
	[Client_id],
	[SousCategorie],
	[Quantité],
	[Rayon],
	[AnneeMois],
	[Rayon_en],
	[Rayon_fr],
	[Key_Livraison]
 FROM [lib://SharedDataFolder/Ventes/sources-xav/Vente.QVD]
(qvd);

///$tab Calendrier
// LET vDateMin = Floor(YearStart(AddYears(today(),-2)));  
// LET vDateMax = Floor(YearEnd(AddYears(today(),0))); 


Temp:  
Load  
     min([DATE_Livraison]) as minDate,  
     max([DATE_Livraison]) as maxDate  
Resident SupplyChain;  

Let vDateMin = Num(Peek('minDate', 0, 'Temp'));  
Let vDateMax = Num(Peek('maxDate', 0, 'Temp'));  
DROP Table Temp;  

TempCalendar:  
LOAD 
       Date($(vDateMin) + RowNo() - 1) AS TempDate
AUTOGENERATE 1
WHILE $(vDateMin)+IterNo()-1<= $(vDateMax);  


  

DimPeriod:
NOCONCATENATE LOAD
       Year(TempDate)*10000 + Month(TempDate)* 100 + Day(TempDate) as key_Date, // YYYYMMDD
       Year(TempDate)                                                                                as Period_Year,
       'Q'&Ceil(Month(TempDate)/3)                                                     as Period_Quarter,
       'Q'&Ceil(Month(TempDate)/3) &'-'& Year(TempDate)                  as Period_QuarterName,
       Monthname(TempDate)                                                                    as Period_MonthName,
       Date(Monthname(TempDate),'MMM YY')                                       as Period_MonthName_Short,   
       Month(TempDate)                                                                        as Period_Month,
       Day(TempDate)                                                                                 as Period_DayOfMonth,
       text(Date(TempDate, 'W'))                                                       as Period_DayOfWeek,
       if(WeekDay(TempDate)<5,1,0)                                                     as Period_CountWeekDays,     
       text(Date(TempDate, 'WWW'))                                                     as Period_DayNameOfWeek,
       'W'&Week(TempDate)                                                                     as Period_Week,
       Replace(WeekName(TempDate), '/', '-W')                                   as Period_WeekName,
       TempDate                                                                                      as Period_Date,
       WeekDay(TempDate)                                                                      as Period_DayName,
       Date#(Date(TempDate, 'D MMM'), 'D MMM')                                  as Period_DayMonth,
       Date#(Date(TempDate, 'WWW D MMM'), 'WWW D MMM')                   as Period_DayNameMonth,
       Date#(Date(TempDate, 'WWW D MMM YYYY'), 'WWW D MMM YYYY') as Period_DayNameMonthYear
RESIDENT TempCalendar ORDER BY TempDate ASC;

/* Month at Month level */
CONCATENATE (DimPeriod)LOAD distinct
       Year(TempDate)*100 + Month(TempDate)                      as key_Date,  // YYYYMM
       Year(TempDate)                                                                   as Period_Year,
       'Q'&Ceil(Month(TempDate)/3)                                        as Period_Quarter,
       'Q'&Ceil(Month(TempDate)/3) &'-'& Year(TempDate)     as Period_QuarterName,
       Monthname(TempDate)                                                       as Period_MonthName,
       Date(Monthname(TempDate),'MMM YY')                          as Period_MonthName_Short,
       Month(TempDate)                                                           as Period_Month
RESIDENT TempCalendar ORDER BY TempDate ASC;


drop table TempCalendar;
///$tab P&L
//Creation de la table pour le PNL avec tous les indicateurs
//Store QVD pour calcul plus tard 


// Mapping_Region_Mag:
// Mapping Load 
// numMagasin, Région
// resident MAG
// ;

// Tbl_Nationalite:
// LOAD 
// 	[Nationalite],
// 	[Client_id]
// resident Client;
// Join
// Load Client_id,
// AnneeMois as AnneeMois_PnL,
// sum(CA_HT) as CA_PnL
// Resident Vente
// Group By Client_id, AnneeMois;

// STORE 'Tbl_Nationalite' INTO  [lib://SharedDataFolder/Ventes/sources-xav/TBL_Nationalite.QVD] (qvd);

// Tbl_PnL:
// Load 
// numMagasin,
// if (numMagasin='0138','Inconnue',ApplyMap('Mapping_Region_Mag', numMagasin,'Inconnue')) as Region_PnL,
// AnneeMois as AnneeMois_PnL,
// //SubField(AnneeMois,'-',2) as Mois_Pnl,
// Rayon as Rayon_PnL,
// sum(CA_HT) as CA_PnL
// Resident Vente
// group by if (numMagasin='0138','Inconnue',ApplyMap('Mapping_Region_Mag', numMagasin,'Inconnue')),
// AnneeMois, Rayon, numMagasin
// ;


// STORE 'Tbl_PnL' INTO  [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD] (qvd);

// exit script;


Tbl_Dimension:
Load * inline
[Région_, dimension_PnL, Order_PnL
Régions,Régions,1
Bretagne,Bretagne,10
Centre,Centre,11
Est,Est,12
Languedoc,Languedoc,13
Nord Normandie,Nord Normandie,14
Paris Centre,Paris Centre,15
Paris Est,Paris Est,16
Paris Ouest,Paris Ouest,17
Rhone Alpes,Rhone Alpes,18
Sud Est,Sud Est,19
Sud Ouest,Sud Ouest,20
Inconnue,Inconnue,21
Rayons,Rayons,30
Alimentaire,Alimentaire,40
Boissons,Boissons,41
Autre,Autre,42
Total,Total,70
Nationalité,Nationalité,49
Japon,Japon,50
France,France,51
Chine,Chine,52
Royaume-Uni,Royaume-Uni,53
Russian Federation,Russian Federation,54
Hong Kong,Hong Kong,55
Singapore,Singapore,56
United States,United States,57
Shanghai,Shanghai,58
India,India,59
United Arab Emirates,United Arab Emirates,60
Italy,Italy,61
Taiwan,Taiwan,62
Qatar,Qatar,63
Switzerland,Switzerland,64
Autres,Autres,65
](delimiter is ',');


Design_Tbl:
Load * Inline
[Design
Régions;<bold>;;<italic>;;<center>;;<comment>
Rayons;<bold>;;<italic>;;<center>;;<comment>
Nationalité;<bold>;;<italic>;;<center>;;<comment>
Total;<bold>;rgb(0,102,204);<white>;;<center>;<large>;
](delimiter is '|');

// Tbl_Dimension:
// Load * inline
// [Region_PnL
// Bretagne
// Centre
// Est
// Languedoc
// Nord Normandie
// Paris Centre
// Paris Est
// Paris Ouest
// Rhone Alpes
// Sud Est
// Sud Ouest
// Total](delimiter is ',');

TBL_PnL_tmp:
Load *
where CA_PnL > 0 and len(trim(AnneeMois_PnL)) > 0;
Load 
	if (Match([Nationalite],'Japon', 'France', 'Chine', 'Royaume-Uni', 'Russian Federation', 'Hong Kong', 'Singapore', 'United States', 
    'Shanghai', 'India', 'United Arab Emirates', 'Italy', 'Taiwan', 'Qatar', 'Switzerland'),[Nationalite],'Autres')  as dimension_PnL,
    AnneeMois_PnL,
    sum(CA_PnL) as CA_PnL  
from [lib://SharedDataFolder/Ventes/sources-xav/TBL_Nationalite.QVD] (qvd)
// where len(trim(AnneeMois_PnL)) > 0 
Group by AnneeMois_PnL,[Nationalite]
;

LOAD
    Region_PnL as dimension_PnL,
    AnneeMois_PnL,
    sum(CA_PnL) as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD] (qvd)
where len(trim(AnneeMois_PnL)) > 0
Group by Region_PnL, AnneeMois_PnL;

Load
	Rayon_PnL as dimension_PnL,
    AnneeMois_PnL,
    sum(CA_PnL) as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD] (qvd)
where len(trim(AnneeMois_PnL)) > 0
Group by AnneeMois_PnL, Rayon_PnL;

LOAD
    'Total' as dimension_PnL,
    AnneeMois_PnL,
    sum(CA_PnL) as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD](qvd)
where len(trim(AnneeMois_PnL)) > 0
group by AnneeMois_PnL;

LOAD Distinct
    'Régions' as dimension_PnL,
    AnneeMois_PnL,
    0 as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD](qvd)
where len(trim(AnneeMois_PnL)) > 0
;

LOAD Distinct
    'Nationalité' as dimension_PnL,
    AnneeMois_PnL,
    0 as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD](qvd)
where len(trim(AnneeMois_PnL)) > 0
;

LOAD Distinct
    'Rayons' as dimension_PnL,
    AnneeMois_PnL,
    0 as CA_PnL
FROM [lib://SharedDataFolder/Ventes/sources-xav/TBL_PnL.QVD](qvd)
where len(trim(AnneeMois_PnL)) > 0
;



Mapping_Mois_Number:
Mapping 
Load * inline
[NumeroMois, NomMois
janv,1
févr,2
mars,3
avr,4
mai,5
juin,6
juil,7
août,8
sept,9
oct,10
nov,11
déc,12](delimiter is ',');

TBL_PnL:
Load 
*,
dual(SubField(AnneeMois_PnL,'-',2), ApplyMap('Mapping_Mois_Number',SubField(AnneeMois_PnL,'-',2)))
 as Mois_PnL,
SubField(AnneeMois_PnL,'-',1) as Annee_PnL

Resident TBL_PnL_tmp;

drop Table TBL_PnL_tmp;

///$tab Section générée automatiquement
///$autogenerated
Set dataManagerTables = '','couleur','Rayon_couleur','Region-couleur';
//This block renames script tables from non generated section which conflict with the names of managed tables

For each name in $(dataManagerTables) 
    Let index = 0;
    Let currentName = name; 
    Let tableNumber = TableNumber(name); 
    Let matches = 0; 
    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
        index = index + 1; 
        currentName = name & '-' & index; 
        tableNumber = TableNumber(currentName) 
        matches = Match('$(currentName)', $(dataManagerTables));
    Loop 
    If index > 0 then 
            Rename Table '$(name)' to '$(currentName)'; 
    EndIf; 
Next; 
Set dataManagerTables = ;


Unqualify *;

__countryAliasesBase:
LOAD
	Alias AS [__Country],
	ISO3Code AS [__ISO3Code]
FROM [lib://AttachedFiles/countryAliases.qvd]
(qvd);

__countryGeoBase:
LOAD
	ISO3Code AS [__ISO3Code],
	ISO2Code AS [__ISO2Code],
	Polygon AS [__Polygon]
FROM [lib://AttachedFiles/countryGeo.qvd]
(qvd);

__countryName2IsoThree:
MAPPING LOAD
	__Country,
	__ISO3Code
RESIDENT __countryAliasesBase;

__countryCodeIsoThree2Polygon:
MAPPING LOAD
	__ISO3Code,
	__Polygon
RESIDENT __countryGeoBase;

[Client_temp_2158f6a5-28d8-3c45-faab-edc94f4b]:
LOAD
	[Client_id],
	[Nationalite],
	[First Name],
	[Gender],
	APPLYMAP( '__countryCodeIsoThree2Polygon', APPLYMAP( '__countryName2IsoThree', LOWER([Nationalite])), '-') AS [Client.Nationalite_GeoInfo]
RESIDENT [Client];
DROP TABLE [Client];

[SupplyChain_temp_00bb73be-2c2d-dc34-fc70-1e77c06c]:
LOAD
	[Key_Livraison],
	Date(Date#([key_Date], 'YYYYMMDD') ) AS [key_Date],
	[Supply.Rayon],
	[Entrepot],
	[DATE_Livraison],
	[Centrale],
	[GPS_Entrepot],
	[Codepos],
	[CP_Usine],
	[Chemin],
	[Usine],
	[CP_Entrepot],
	[Volumetrie],
	[Annee Construction],
	'-' AS [Extra_9ee97da0-7efc-a1ad-686c-bea450d2]
RESIDENT [SupplyChain];
DROP TABLE [SupplyChain];
DROP FIELD [Extra_9ee97da0-7efc-a1ad-686c-bea450d2];

[DimPeriod_temp_ec912a59-d1d3-9ed6-4fd4-c098d8c6]:
LOAD
	Date(Date#([key_Date], 'YYYYMMDD') ) AS [key_Date],
	[Period_Year],
	[Period_Quarter],
	[Period_QuarterName],
	[Period_MonthName],
	[Period_MonthName_Short],
	[Period_Month],
	[Period_DayOfMonth],
	[Period_DayOfWeek],
	[Period_CountWeekDays],
	[Period_DayNameOfWeek],
	[Period_Week],
	[Period_WeekName],
	[Period_Date],
	[Period_DayName],
	[Period_DayMonth],
	[Period_DayNameMonth],
	[Period_DayNameMonthYear],
	'-' AS [Extra_ed10cfd6-14d6-f716-0d98-5ae3fbae]
RESIDENT [DimPeriod];
DROP TABLE [DimPeriod];
DROP FIELD [Extra_ed10cfd6-14d6-f716-0d98-5ae3fbae];

[couleur]:
LOAD
	[color_name] AS [Color_Name],
	[color_type],
	[color_r],
	[color_g],
	[color_b],
	[color_hex],
	[color_id];
LOAD * INLINE 
[
color_name,color_type,color_r,color_g,color_b,color_hex,color_id
QlikGreen,c,0,152,152,#009845,1
Tanzanite,f,28,53,53,#1C355E,2
Slate,f,36,75,75,#244B5A,3
Turquoise,f,0,101,101,#006580,4
Aquamarine,f,16,207,207,#10CFC9,5
Wine,f,135,0,0,#870064,6
Amethyst,f,101,93,93,#655DC6,7
Stone,f,196,207,207,#C4CFDA,8
Sapphire,s,0,92,92,#005CB9,9
Emerald,s,0,105,105,#006937,10
Ruby,s,231,0,0,#E7004C,11
QlikGrey,s,84,86,86,#54565A,12
Coral,h,255,142,142,#FF8E9F,13
Topaz,h,255,199,199,#FFC72A,14
Peridot,h,194,213,213,#C2D500,15
RougePale,h,230,176,170,#E6B0AA,16
JaunePale,h,252,230,196,#FAD7A0,17
VertPale,h,198,238,230,#BBE8DF,18
Canari,h,249,236,134,#F9EC86,19
Rose,h,215,108,108,#D76C6C,20
](delimiter is ',');

[Rayon_couleur]:
LOAD
	[Rayon_couleur.Rayon] AS [Rayon],
	[couleur] AS [Color_Name];
LOAD * INLINE 
[
Rayon_couleur.Rayon,couleur
Alimentaire,JaunePale
Boissons,Coral
Autre,Emerald
](delimiter is ',');

[Region-couleur]:
LOAD
	[Region-couleur.Région] AS [Région],
	[Couleur],
	[Code_Couleur_Region];
LOAD * INLINE 
[
Region-couleur.Région,Couleur,Code_Couleur_Region
Nord Normandie,Canari,#F9EC86
Centre,Coral,#D76C6C
Sud Est,QlikGreen,#CBE989
Rhone Alpes,Emerald,#26A0A7
Paris Ouest,Aquamarine,#65D3DA
Languedoc,Aquamarine,#A54343
Paris Centre,Aquamarine,#EC983D
Bretagne,Aquamarine,#FAD144
Paris Est,Aquamarine,#EBF898
Sud Ouest,Aquamarine,#138185
Est,Aquamarine,#79D69F
](delimiter is ',');



TAG FIELD [Nationalite] WITH '$geoname', '$relates_Client.Nationalite_GeoInfo';
TAG FIELD [Client.Nationalite_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Nationalite';RENAME TABLE [Client_temp_2158f6a5-28d8-3c45-faab-edc94f4b] to [Client];

RENAME TABLE [SupplyChain_temp_00bb73be-2c2d-dc34-fc70-1e77c06c] to [SupplyChain];

RENAME TABLE [DimPeriod_temp_ec912a59-d1d3-9ed6-4fd4-c098d8c6] to [DimPeriod];

DROP TABLES __countryAliasesBase, __countryGeoBase;
[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

DERIVE FIELDS FROM FIELDS [Date ForeCast], [key_Date], [DATE_Livraison], [Period_MonthName], [Period_MonthName_Short], [Period_Date] USING [autoCalendar] ;
///$tab Fin
exit script;
///$tab Section  Access
// section access;
// LOAD
//     "ACCESS",
//     "USERID",
//     REGION_SECURE,
//     OMIT
// FROM [lib://data (qtsel_xle)/Point de Ventes\Securite.xlsx]
// (ooxml, embedded labels, table is Sheet1);

// // load * inline [
// // ACCESS, USERID, REGION_SECURE
// // ADMIN, QTSEL\xle, ALL
// // USER, FRPAR-XLE\yann, BRETAGNE
// // USER, FRPAR-XLE\mathilde, BRETAGNE
// // USER, INTERNAL\SA_SCHEDULER,*
// // ];
// section application;

// Search Exclude region.Area, Quantité,COGS,CA_HT,CA, Marge,Discount,Article, photo, coordonnees,Client, AnneeMois,Key_Livraison,ArticleEAN ;


///$tab Store
// // FOR i = 0 to NoOfTables() - 1
//        LET tableName = TableName(i);
     
//        	Trace Création de $(tableName).QVD;
//        	STORE '$(tableName)' INTO  [lib://data (qtsel_xle)/PDV/$(tableName).QVD] (qvd);

// NEXT


// // let numTables = NoOfTables();
// // for i=1 to $(numTables)
// //  let table = TableName(0);
// //  drop table [$(table)];
// // next